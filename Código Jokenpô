```
// LEDs do jogador: pedra (2), papel (3), tesoura (4)
const int ledsJogador[3] = {2, 3, 4};

// LEDs do computador: pedra (5), papel (6), tesoura (7)
const int ledsCPU[3] = {5, 6, 7};

// Botões do jogador: pedra (8), papel (9), tesoura (10)
const int botoesJogador[3] = {8, 9, 10};

// Botão de iniciar: 11
const int botaoIniciar = 11;

// Buzzers: 12 e 13
const int buzzer1 = 12;
const int buzzer2 = 13;

bool partidaIniciada = false;
int jogadaJogador = -1;
int jogadaCPU = -1;

unsigned long tempoAnterior = 0;
int estadoSemaforo = 0;

// Variáveis para controle da música
unsigned long tempoMusicaAnterior = 0;
int notaAtual = 0;
bool musicaTocando = false;
bool pausaAtiva = false;
bool pausaLongaAtiva = false;
bool usarBuzzer1 = true;

// Variáveis para controle dos LEDs no ritmo da música
bool ledsRitmoAtivos = true;
bool todosLedsLigados = false;

int notasMario[] = {
  // Primeira parte - frequências aumentadas
  440, 440, 0, 440, 0, 349, 440, 0, 523, 0, 0, 0, 262, 0, 0, 0,
  // Segunda parte  
  349, 0, 0, 262, 0, 0, 220, 0, 0, 294, 0, 330, 0, 311, 294, 0,
  // Terceira parte
  262, 440, 523, 587, 0, 466, 523, 0, 440, 0, 349, 392, 330, 0, 0,
  // Repetição da primeira parte (mais longa)
  349, 0, 0, 262, 0, 0, 220, 0, 0, 294, 0, 330, 0, 311, 294, 0,
  262, 440, 523, 587, 0, 466, 523, 0, 440, 0, 349, 392, 330, 0,
  // Final melódico - frequências mais altas
  523, 466, 440, 0, 523, 466, 440, 0, 523, 698, 659, 587, 523, 0
};

int duracoesMario[] = {
  // Primeira parte
  125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 250, 125, 125, 125, 250, 125,
  // Segunda parte
  125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
  // Terceira parte
  167, 167, 167, 167, 125, 167, 167, 125, 167, 125, 167, 167, 167, 125, 125,
  // Repetição da primeira parte (mais longa)
  125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
  167, 167, 167, 167, 125, 167, 167, 125, 167, 125, 167, 167, 167, 125,
  // Final melódico
  167, 167, 167, 125, 167, 167, 167, 125, 167, 167, 167, 167, 250, 250
};

int totalNotas = 79;

void setup() {
  for (int i = 0; i < 3; i++) {
    pinMode(ledsJogador[i], OUTPUT);
    pinMode(ledsCPU[i], OUTPUT);
    pinMode(botoesJogador[i], INPUT_PULLUP);
  }

  pinMode(botaoIniciar, INPUT_PULLUP);
  pinMode(buzzer1, OUTPUT);
  pinMode(buzzer2, OUTPUT);

  apagarTodosLEDs();
  Serial.begin(9600);
}

void loop() {
  if (!partidaIniciada) {
    // Tocar música do Mario continuamente
    tocarMarioTema();
    
    // Iniciar partida
    if (digitalRead(botaoIniciar) == LOW) {
      delay(50); // debounce
      if (digitalRead(botaoIniciar) == LOW) {
        // Parar a música em ambos buzzers
        noTone(buzzer1);
        noTone(buzzer2);
        musicaTocando = false;
        pausaAtiva = false;
        pausaLongaAtiva = false;
        notaAtual = 0;
        usarBuzzer1 = true;
        ledsRitmoAtivos = false; // Desativa LEDs no ritmo
        
        apagarTodosLEDs();
        jogadaJogador = -1;
        partidaIniciada = true;
        delay(200);
      }
    }

    return;
  }

  // Jogada do jogador
  if (jogadaJogador == -1) {
    for (int i = 0; i < 3; i++) {
      if (digitalRead(botoesJogador[i]) == LOW) {
        jogadaJogador = i;
        digitalWrite(ledsJogador[i], HIGH);
        delay(300);
        digitalWrite(ledsJogador[i], LOW);
        delay(200);
        break;
      }
    }
    return;
  }

  // Jogada do computador
  jogadaCPU = random(0, 3);
  digitalWrite(ledsCPU[jogadaCPU], HIGH);
  delay(1000);
  digitalWrite(ledsCPU[jogadaCPU], LOW);

  // Resultado: 0 = empate, 1 = jogador vence, 2 = computador vence
  int resultado = (3 + jogadaJogador - jogadaCPU) % 3;

  if (resultado == 0) {
    // Som de empate
    tone(buzzer2, 880, 150);
    delay(180);
    tone(buzzer2, 1047, 150);
    delay(180);
    tone(buzzer2, 988, 200);
    delay(250);
  
  } else if (resultado == 1) {
    // Som de vitória
    tone(buzzer2, 880, 120);
    delay(140);
    tone(buzzer2, 1047, 120);
    delay(140);
    tone(buzzer2, 1319, 120);
    delay(140);
    tone(buzzer2, 1760, 250);
    delay(280);
    tone(buzzer2, 1319, 120);
    delay(140);
    tone(buzzer2, 1760, 400);
    delay(450);
    
  } else {
    // Som de derrota
    tone(buzzer2, 392, 400);
    delay(500);
    tone(buzzer2, 349, 400);
    delay(500);
    tone(buzzer2, 311, 400);
    delay(500);
    tone(buzzer2, 262, 1200);
    delay(1300);
    noTone(buzzer2);
  }
  
  delay(1500);
  apagarTodosLEDs();
  partidaIniciada = false;
  
  // Resetar variáveis da música e reativar LEDs no ritmo
  notaAtual = 0;
  musicaTocando = false;
  pausaAtiva = false;
  pausaLongaAtiva = false;
  usarBuzzer1 = true;
  ledsRitmoAtivos = true; // Reativa LEDs no ritmo
  todosLedsLigados = false;
}

void tocarMarioTema() {
  unsigned long tempoAtual = millis();
  
  // Controlar pausa longa entre repetições da música
  if (pausaLongaAtiva) {
    if (tempoAtual - tempoMusicaAnterior >= 300) {
      pausaLongaAtiva = false;
    }
    return;
  }
  
  if (!musicaTocando && !pausaAtiva) {
    // Começar nova nota alternando entre buzzers
    if (notasMario[notaAtual] > 0) {
      if (usarBuzzer1) {
        tone(buzzer1, notasMario[notaAtual]);
      } else {
        tone(buzzer2, notasMario[notaAtual]);
      }
      
      // Acender LEDs no ritmo da música (apenas quando há som)
      if (ledsRitmoAtivos) {
        acenderTodosLEDs();
        todosLedsLigados = true;
      }
    } else {
      // Pausa (nota = 0) - silenciar ambos buzzers
      noTone(buzzer1);
      noTone(buzzer2);
      
      // Apagar LEDs durante pausas
      if (ledsRitmoAtivos) {
        apagarTodosLEDs();
        todosLedsLigados = false;
      }
    }
    
    tempoMusicaAnterior = tempoAtual;
    musicaTocando = true;
  }
  
  // Verificar se é hora de parar a nota atual
  if (musicaTocando && (tempoAtual - tempoMusicaAnterior >= duracoesMario[notaAtual])) {
    noTone(buzzer1);
    noTone(buzzer2);
    
    // Apagar LEDs quando a nota termina
    if (ledsRitmoAtivos && todosLedsLigados) {
      apagarTodosLEDs();
      todosLedsLigados = false;
    }
    
    musicaTocando = false;
    pausaAtiva = true;
    tempoMusicaAnterior = tempoAtual;
  }
  
  // Pequena pausa entre notas
  if (pausaAtiva && (tempoAtual - tempoMusicaAnterior >= 20)) {
    pausaAtiva = false;
    notaAtual++;
    usarBuzzer1 = !usarBuzzer1;
    
    // Se chegou ao fim da música, recomeça
    if (notaAtual >= totalNotas) {
      notaAtual = 0;
      pausaLongaAtiva = true;
      tempoMusicaAnterior = tempoAtual;
      usarBuzzer1 = true;
    }
  }
}

void alternarSemaforo() {
  estadoSemaforo = (estadoSemaforo + 1) % 3;

  for (int i = 0; i < 3; i++) {
    digitalWrite(ledsCPU[i], i == estadoSemaforo);
    digitalWrite(ledsJogador[i], i == estadoSemaforo);
  }
}

void apagarTodosLEDs() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(ledsJogador[i], LOW);
    digitalWrite(ledsCPU[i], LOW);
  }
}

void acenderTodosLEDs() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(ledsJogador[i], HIGH);
    digitalWrite(ledsCPU[i], HIGH);
  }
}
```
